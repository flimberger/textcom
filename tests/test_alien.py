# Copyright (c) 2015 Florian Limberger <flo@snakeoilproductions.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from textcom.alien import ALIEN_DEFAULT_ITEMS,                                \
                          ALIEN_RANKS,                                        \
                          ALIEN_SPECIES,                                      \
                          Alien,                                              \
                          create_alien,                                       \
                          sectoidfName,                                       \
                          sectoidlName,                                       \
                          SPECIES_AIM_RANGE,                                  \
                          SPECIES_FIRSTNAME,                                  \
                          SPECIES_HP_BASE,                                    \
                          SPECIES_LASTNAME,                                   \
                          SPECIES_MOBILITY_RANGE,                             \
                          SPECIES_WEAPON_CLASS


def test_death():
    a = Alien(0, 'Ayy', 10, 10, 10, 0, 'Ayy', 'Lmao', '', None, [], [])
    a.hp = 0
    assert a.check_death()
    assert not a.alive


def test_str():
    rank = 0
    a = Alien(0, 'Ayy', 10, 10, 10, rank, 'Ayy', 'Lmao', '', None, [], [])
    assert str(a) == "(Ayy) " + ALIEN_RANKS[rank] +" Ayy Lmao"


def test_create_alien():
    # this function could be regarded trivial, but the **kwargs stuff is not
    # that intuitive, so test coverage is good

    # test all accepted species
    alien_species = ['Sectoid', 'Thinman', 'Floater', 'Muton']
    for species in alien_species:
        a = create_alien(0, 0, species)
        assert a.species == species
    # test invalid species detection
    exception = None
    try:
        a = create_alien(0, 0, 'Ayy')
    except Exception as e:
        exception = e
    assert exception is not None
    assert str(exception) == 'Unknown alien species'

    # test correct rank handling
    # the value 10 is used because it's not a real rank, that could be
    # generated by the function
    species = 'Sectoid'
    rank = 10
    a = create_alien(0, 0, species, nrank=rank)
    assert a.nrank == rank
    assert a.hp == rank + ALIEN_SPECIES[species][SPECIES_HP_BASE]
    assert rank + ALIEN_SPECIES[species][SPECIES_AIM_RANGE][0] <= a.aim
    assert a.aim < rank + ALIEN_SPECIES[species][SPECIES_AIM_RANGE][1]
    assert rank + ALIEN_SPECIES[species][SPECIES_MOBILITY_RANGE][0]           \
           <= a.mobility
    assert a.mobility                                                         \
           < rank + ALIEN_SPECIES[species][SPECIES_MOBILITY_RANGE][1]
    assert a.firstname in sectoidfName
    assert a.lastname in sectoidlName
    assert a.armour == 'BDY'
    assert type(a.weapon) == ALIEN_SPECIES[species][SPECIES_WEAPON_CLASS]
    assert len(a.items) == 1
    assert a.items[0] in ALIEN_DEFAULT_ITEMS
    assert len(a.mods) == 0

    # test correct overrides
    hp_value = 2
    aim_value = 2
    mobility_value = 2
    firstname_value = 'Ayy'
    lastname_value = 'Lmao'
    armour_value = 'LOLarmour'
    weapon_value = 'LOLweapon'
    items_value = [1,2]
    mods_value = [1, 2]
    a = create_alien(0, 0, species, nrank=rank, hp=hp_value, aim=aim_value,
                     mobility=mobility_value, firstname=firstname_value,
                     lastname=lastname_value, armour=armour_value,
                     weapon=weapon_value, items=items_value, mods=mods_value)
    assert a.aim == aim_value
    assert a.hp == hp_value
    assert a.mobility == mobility_value
    assert a.firstname == firstname_value
    assert a.lastname == lastname_value
    assert a.armour == armour_value
    assert a.weapon == weapon_value
    assert a.items == items_value
    assert a.mods == mods_value
